import { ENUM_RUN_STATE, LinkedList } from "../zego.entity";
export declare class StateCenter {
    testEnvironment: boolean;
    third_token: string;
    pullLimited: boolean;
    configOK: boolean;
    appid: number;
    userid: string;
    sessionid: string;
    roomid: string;
    token: string;
    role: 1 | 2;
    server: string;
    serverBak: string;
    idName: string;
    nickName: string;
    userStateUpdate: boolean;
    roomCreateFlag: number;
    runState: ENUM_RUN_STATE;
    lastRunState: ENUM_RUN_STATE;
    callbackList: {
        [index: string]: Function;
    };
    streamQuerying: boolean;
    streamSeq: number;
    streamList: any[];
    publishStreamList: {};
    userQuerying: boolean;
    userTempList: any[];
    userSeq: number;
    userSeqMergeMap: any;
    userSeqMergeTimer: any;
    userQueryTimer: any;
    lastUserQueryTime: number;
    userListInterval: number;
    userListMergeInterval: number;
    anchor_info: {
        anchor_id: string;
        anchor_id_name: string;
        anchor_nick_name: string;
    };
    deviceInfos: any;
    deviceChangeTimer: any;
    deviceStateOut: boolean;
    sendCommandMap: {};
    sendCommandList: LinkedList;
    sendDataMap: {};
    sendDataList: LinkedList;
    joinLiveCallbackMap: {};
    joinLiveRequestMap: {};
    streamUrlMap: {};
    cmdCallback: {};
    customUrl: Array<string>;
    transSeqMap: {};
    realyMessageList: any[];
    relayTimer: any;
    bigImLastTimeIndex: number;
    bigIMmessageList: any[];
    bigImCallbackMap: {};
    bigImTimer: any;
    serverTimeOffset: number;
    datiTimeWindow: number;
    bigimTimeWindow: number;
    bigImMessageList: any[];
    screenShotStreamList: {
        stream: MediaStream;
        type: number;
    }[];
    tryLoginCount: number;
    tryLoginTimer: any;
    tryHeartbeatCount: number;
    heartbeatInterval: number;
    heartbeatTimer: any;
    sendDataCheckTimer: any;
    sendDataCheckInterval: number;
    sendDataTimeout: number;
    sendDataDropTimeout: number;
    sendDataCheckOnceCount: number;
    sendRoomMsgTime: number;
    SendRoomMsgInterval: number;
    cmdSeq: number;
    startConnceTime: any;
    startloginTime: any;
    startloginSucTime: any;
    audioEffectBuffer: any;
    audioBitRate: number;
    cdnSeq: number;
    constructor();
    isLogin(): boolean;
    getRequestId(): string;
    getSignalCmdContent(requestId: string, dest_id_name: string, result?: number): string;
}
